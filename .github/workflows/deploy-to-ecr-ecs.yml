name: Build and Push Docker Image to ECR

on:
  workflow_dispatch:

env:
  ECR_BACK: "376572378342.dkr.ecr.ap-south-1.amazonaws.com/pg-agi-production-backend"
  ECR_FRONT: "376572378342.dkr.ecr.ap-south-1.amazonaws.com/pg-agi-production-frontend"
  ECS_CLUSTER_NAME: "pg-agi-production-cluster"
  FRONT_ECS_TASK_DEFINITION: "pg-agi-production-frontend"
  BACK_ECS_TASK_DEFINITION: "pg-agi-production-backend"
  FRONT_ECS_SERVICE_NAME: "pg-agi-production-frontend-service"
  BACK_ECS_SERVICE_NAME: "pg-agi-production-backend-service"
  FRONT_CONTAINER_NAME: "pg-agi-production-frontend"
  BACK_CONTAINER_NAME: "pg-agi-production-backend"

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: "ap-south-1"

      - name: Log in to Amazon ECR
        id: ecr-login
        uses: aws-actions/amazon-ecr-login@v1

      - name: Front Build and push Docker image
        id: front-build-and-push
        uses: docker/build-push-action@v5.1.0
        with:
          context: ./frontend
          file: ./frontend/Dockerfile
          push: true
          tags: |
            ${{ env.ECR_FRONT }}:${{ github.run_number }}
          build-args: |
            NEXT_PUBLIC_API_URL=${{ secrets.NEXT_PUBLIC_API_URL }}

      - name: Back Build and push Docker image
        id: back-build-and-push
        uses: docker/build-push-action@v5.1.0
        with:
          context: ./backend
          file: ./backend/Dockerfile
          push: true
          tags: |
            ${{ env.ECR_BACK }}:${{ github.run_number }}

      - name: Get the Current ECS Task Definition
        id: front-get-task-def
        run: |
          aws ecs describe-task-definition --task-definition ${{ env.FRONT_ECS_TASK_DEFINITION }} --query taskDefinition > front-task-definition.json
          cat front-task-definition.json      
      
      - name: Get the Current ECS Task Definition
        id: back-get-task-def
        run: |
          aws ecs describe-task-definition --task-definition ${{ env.BACK_ECS_TASK_DEFINITION }} --query taskDefinition > back-task-definition.json 
          cat back-task-definition.json   
          
      - name: Render New ECS Task Definition
        id: front-task-def
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: front-task-definition.json
          container-name: ${{ env.FRONT_CONTAINER_NAME }}
          image: ${{ env.ECR_FRONT }}:${{ github.run_number }}  

      - name: Render New ECS Task Definition
        id: back-task-def
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: back-task-definition.json
          container-name: ${{ env.BACK_CONTAINER_NAME }}
          image: ${{ env.ECR_BACK }}:${{ github.run_number }} 
          
      - name: FRONT Deploy Amazon ECS Task Definition
        uses: aws-actions/amazon-ecs-deploy-task-definition@v2
        with:
          task-definition: ${{ steps.front-task-def.outputs.task-definition }}
          service: ${{ env.FRONT_ECS_SERVICE_NAME }}
          cluster: ${{ env.ECS_CLUSTER_NAME }}
          wait-for-service-stability: true

      - name: BACK Deploy Amazon ECS Task Definition
        uses: aws-actions/amazon-ecs-deploy-task-definition@v2
        with:
          task-definition: ${{ steps.back-task-def.outputs.task-definition }}
          service: ${{ env.BACK_ECS_SERVICE_NAME }}
          cluster: ${{ env.ECS_CLUSTER_NAME }}
          wait-for-service-stability: true    
