name: Build and Deploy to ECR/ECS

on:
  workflow_dispatch:
    inputs:
      deploy_frontend:
        description: 'Deploy frontend'
        required: true
        type: boolean
      deploy_backend:
        description: 'Deploy backend'
        required: true
        type: boolean

jobs:
  build-and-deploy:
    name: Build and Deploy
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Get Terraform outputs
        id: terraform-outputs
        run: |
          cd infra
          # Install Terraform
          wget -O- https://apt.releases.hashicorp.com/gpg | gpg --dearmor | sudo tee /usr/share/keyrings/hashicorp-archive-keyring.gpg
          echo "deb [signed-by=/usr/share/keyrings/hashicorp-archive-keyring.gpg] https://apt.releases.hashicorp.com $(lsb_release -cs) main" | sudo tee /etc/apt/sources.list.d/hashicorp.list
          sudo apt update && sudo apt install terraform
          
          # Initialize Terraform
          terraform init
          
          # Get outputs
          echo "FRONTEND_REPO=$(terraform output -raw frontend_repository_url)" >> $GITHUB_ENV
          echo "BACKEND_REPO=$(terraform output -raw backend_repository_url)" >> $GITHUB_ENV
          echo "ECS_CLUSTER=$(terraform output -raw ecs_cluster_name)" >> $GITHUB_ENV
          echo "FRONTEND_SERVICE=$(terraform output -raw frontend_service_name)" >> $GITHUB_ENV
          echo "BACKEND_SERVICE=$(terraform output -raw backend_service_name)" >> $GITHUB_ENV
          echo "AWS_REGION=$(terraform output -raw aws_region || echo "${{ secrets.AWS_REGION }}")" >> $GITHUB_ENV

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build, tag, and push frontend image to Amazon ECR
        if: ${{ github.event_name != 'workflow_dispatch' || github.event.inputs.deploy_frontend == 'true' }}
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: ${{ env.FRONTEND_REPO }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          cd frontend
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          docker tag $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG $ECR_REGISTRY/$ECR_REPOSITORY:latest
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest
          echo "FRONTEND_IMAGE=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_ENV

      - name: Build, tag, and push backend image to Amazon ECR
        if: ${{ github.event_name != 'workflow_dispatch' || github.event.inputs.deploy_backend == 'true' }}
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: ${{ env.BACKEND_REPO }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          cd backend
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          docker tag $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG $ECR_REGISTRY/$ECR_REPOSITORY:latest
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest
          echo "BACKEND_IMAGE=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_ENV

      - name: Update frontend ECS service
        if: ${{ github.event_name != 'workflow_dispatch' || github.event.inputs.deploy_frontend == 'true' }}
        run: |
          aws ecs update-service --cluster ${{ env.ECS_CLUSTER }} \
                               --service ${{ env.FRONTEND_SERVICE }} \
                               --force-new-deployment \
                               --region ${{ env.AWS_REGION }}

      - name: Update backend ECS service
        if: ${{ github.event_name != 'workflow_dispatch' || github.event.inputs.deploy_backend == 'true' }}
        run: |
          aws ecs update-service --cluster ${{ env.ECS_CLUSTER }} \
                               --service ${{ env.BACKEND_SERVICE }} \
                               --force-new-deployment \
                               --region ${{ env.AWS_REGION }}

      - name: Wait for services to be stable
        run: |
          if [[ "${{ github.event_name }}" != "workflow_dispatch" || "${{ github.event.inputs.deploy_frontend }}" == "true" ]]; then
            aws ecs wait services-stable --cluster ${{ env.ECS_CLUSTER }} --services ${{ env.FRONTEND_SERVICE }} --region ${{ env.AWS_REGION }}
          fi
          
          if [[ "${{ github.event_name }}" != "workflow_dispatch" || "${{ github.event.inputs.deploy_backend }}" == "true" ]]; then
            aws ecs wait services-stable --cluster ${{ env.ECS_CLUSTER }} --services ${{ env.BACKEND_SERVICE }} --region ${{ env.AWS_REGION }}
          fi